/// <reference path="../../../../index.d.ts" />
/// <reference types="node" />
import type SDK from "@filen/sdk";
import * as Fuse from "@gcas/fuse";
import { FuseErrorCallbackSimple, FuseStatFSCallback, FuseStatsCallback, FuseReaddirCallback, FuseReadlinkCallback, FuseGetxattrCallback, FuseListxattrCallback, FuseOpenCallback, FuseCreateCallback, FuseUpload, FuseReadWriteCallback, OpenMode } from "../types";
import { ISemaphore } from "../../semaphore";
export declare class Ops implements Fuse.OPERATIONS {
    readonly sdk: SDK;
    readonly baseTmpPath: string;
    readonly fullDownloadsTmpPath: string;
    readonly writeTmpPath: string;
    readonly decryptedChunksTmpPath: string;
    readonly encryptedChunksTmpPath: string;
    readonly uploadsTmpPath: string;
    readonly xattrPath: string;
    readonly uploads: Record<string, FuseUpload>;
    readonly readWriteMutex: Record<string, ISemaphore>;
    readonly openMode: Record<string, OpenMode>;
    readonly virtualFiles: Record<string, Fuse.Stats>;
    readonly openFileHandles: Record<string, number>;
    readonly writeTmpChunkToDiskMutex: Record<string, ISemaphore>;
    readonly downloadChunkToLocalActive: Record<string, Record<number, boolean>>;
    readonly chunkDownloadsActive: Record<string, number>;
    nextFd: number;
    private readonly _noop;
    private readonly _access;
    private readonly _statFS;
    private readonly _getattr;
    private readonly _readdir;
    private readonly _readlink;
    private readonly _getxattr;
    private readonly _setxattr;
    private readonly _listxattr;
    private readonly _removexattr;
    private readonly _opendir;
    private readonly _unlink;
    private readonly _mkdir;
    private readonly _rename;
    private readonly _create;
    private readonly _open;
    private readonly _release;
    private readonly _read;
    private readonly _write;
    constructor({ sdk, baseTmpPath, fullDownloadsTmpPath, writeTmpPath, decryptedChunksTmpPath, xattrPath, encryptedChunksTmpPath, uploadsTmpPath }: {
        sdk: SDK;
        baseTmpPath: string;
        fullDownloadsTmpPath: string;
        writeTmpPath: string;
        decryptedChunksTmpPath: string;
        xattrPath: string;
        encryptedChunksTmpPath: string;
        uploadsTmpPath: string;
    });
    init(callback: FuseErrorCallbackSimple): void;
    access(path: string, mode: number, callback: FuseErrorCallbackSimple): void;
    statfs(path: string, callback: FuseStatFSCallback): void;
    getattr(path: string, callback: FuseStatsCallback): void;
    fgetattr(path: string, _fd: number, callback: FuseStatsCallback): void;
    flush(_path: string, _fd: number, callback: FuseErrorCallbackSimple): void;
    fsync(_path: string, _dataSync: boolean, _fd: number, callback: FuseErrorCallbackSimple): void;
    fsyncdir(_path: string, _dataSync: boolean, _fd: number, callback: FuseErrorCallbackSimple): void;
    readdir(path: string, callback: FuseReaddirCallback): void;
    truncate(_path: string, _size: number, callback: FuseErrorCallbackSimple): void;
    ftruncate(_path: string, _fd: number, _size: number, callback: FuseErrorCallbackSimple): void;
    readlink(path: string, callback: FuseReadlinkCallback): void;
    chown(_path: string, _uid: number, _gid: number, callback: FuseErrorCallbackSimple): void;
    chmod(_path: string, _mode: number, callback: FuseErrorCallbackSimple): void;
    mknod(_path: string, _mode: number, _dev: number, callback: FuseErrorCallbackSimple): void;
    setxattr(path: string, name: string, value: Buffer, _size: number, _flags: number, callback: FuseErrorCallbackSimple): void;
    getxattr(path: string, name: string, _size: number, callback: FuseGetxattrCallback): void;
    listxattr(path: string, callback: FuseListxattrCallback): void;
    removexattr(path: string, name: string, callback: FuseErrorCallbackSimple): void;
    open(path: string, mode: number, callback: FuseOpenCallback): void;
    opendir(path: string, mode: number, callback: FuseOpenCallback): void;
    read(path: string, _fd: number, buffer: Buffer, length: number, position: number, callback: FuseReadWriteCallback): void;
    write(path: string, _fd: number, buffer: Buffer, length: number, position: number, callback: FuseReadWriteCallback): void;
    release(path: string, _fd: number, callback: FuseErrorCallbackSimple): void;
    releasedir(_path: string, _fd: number, callback: FuseErrorCallbackSimple): void;
    create(path: string, mode: number, callback: FuseCreateCallback): void;
    utimens(_path: string, _atime: Date, _mtime: Date, callback: FuseErrorCallbackSimple): void;
    unlink(path: string, callback: FuseErrorCallbackSimple): void;
    rename(src: string, dest: string, callback: FuseErrorCallbackSimple): void;
    link(_src: string, _dest: string, callback: FuseErrorCallbackSimple): void;
    symlink(_src: string, _dest: string, callback: FuseErrorCallbackSimple): void;
    mkdir(path: string, _mode: number, callback: FuseErrorCallbackSimple): void;
    rmdir(path: string, callback: FuseErrorCallbackSimple): void;
}
export default Ops;
