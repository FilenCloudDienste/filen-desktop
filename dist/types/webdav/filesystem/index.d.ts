/// <reference types="node" />
import SDK, { FSStats } from "@filen/sdk";
import * as WebDAV from "@filen/webdav-server";
import { Readable, Writable } from "stream";
export declare class FileSystem extends WebDAV.FileSystem {
    readonly sdk: SDK;
    readonly propertyManagers: Record<string, WebDAV.IPropertyManager>;
    readonly lockManagers: Record<string, WebDAV.ILockManager>;
    readonly virtualFiles: Record<string, FSStats>;
    private readonly __propertyManager;
    private readonly __lockManager;
    private readonly __type;
    private readonly __readDir;
    private readonly __displayName;
    private readonly __creationDate;
    private readonly __lastModifiedDate;
    private readonly __size;
    private readonly __mimeType;
    private readonly __etag;
    private readonly __fastExistsCheck;
    private readonly __copy;
    private readonly __move;
    private readonly __rename;
    private readonly __delete;
    private readonly __create;
    private readonly __openWriteStream;
    private readonly __openReadStream;
    constructor({ sdk }: {
        sdk: SDK;
    });
    protected _propertyManager(path: WebDAV.Path, _ctx: WebDAV.PropertyManagerInfo, callback: WebDAV.ReturnCallback<WebDAV.IPropertyManager>): void;
    protected _lockManager(path: WebDAV.Path, _ctx: WebDAV.LockManagerInfo, callback: WebDAV.ReturnCallback<WebDAV.ILockManager>): void;
    protected _type(path: WebDAV.Path, _ctx: WebDAV.TypeInfo, callback: WebDAV.ReturnCallback<WebDAV.ResourceType>): void;
    protected _readDir(path: WebDAV.Path, _ctx: WebDAV.ReadDirInfo, callback: WebDAV.ReturnCallback<string[] | WebDAV.Path[]>): void;
    protected _displayName(path: WebDAV.Path, _ctx: WebDAV.DisplayNameInfo, callback: WebDAV.ReturnCallback<string>): void;
    protected _creationDate(path: WebDAV.Path, _ctx: WebDAV.CreationDateInfo, callback: WebDAV.ReturnCallback<number>): void;
    protected _lastModifiedDate(path: WebDAV.Path, _ctx: WebDAV.LastModifiedDateInfo, callback: WebDAV.ReturnCallback<number>): void;
    protected _size(path: WebDAV.Path, _ctx: WebDAV.SizeInfo, callback: WebDAV.ReturnCallback<number>): void;
    protected _mimeType(path: WebDAV.Path, _ctx: WebDAV.MimeTypeInfo, callback: WebDAV.ReturnCallback<string>): void;
    protected _etag(path: WebDAV.Path, _ctx: WebDAV.ETagInfo, callback: WebDAV.ReturnCallback<string>): void;
    protected _fastExistCheck(_ctx: WebDAV.RequestContext, path: WebDAV.Path, callback: (exists: boolean) => void): void;
    protected _copy(pathFrom: WebDAV.Path, pathTo: WebDAV.Path, _ctx: WebDAV.CopyInfo, callback: WebDAV.ReturnCallback<boolean>): void;
    protected _move(pathFrom: WebDAV.Path, pathTo: WebDAV.Path, _ctx: WebDAV.MoveInfo, callback: WebDAV.ReturnCallback<boolean>): void;
    protected _rename(pathFrom: WebDAV.Path, newName: string, _ctx: WebDAV.RenameInfo, callback: WebDAV.ReturnCallback<boolean>): void;
    protected _delete(path: WebDAV.Path, _ctx: WebDAV.DeleteInfo, callback: WebDAV.SimpleCallback): void;
    protected _create(path: WebDAV.Path, ctx: WebDAV.CreateInfo, callback: WebDAV.SimpleCallback): void;
    protected _openWriteStream(path: WebDAV.Path, _ctx: WebDAV.OpenWriteStreamInfo, callback: WebDAV.ReturnCallback<Writable>): void;
    protected _openReadStream(path: WebDAV.Path, _ctx: WebDAV.OpenReadStreamInfo, callback: WebDAV.ReturnCallback<Readable>): void;
}
export default FileSystem;
